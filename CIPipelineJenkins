def artifactname = "app-devops-artifact-ci.jar"
def version = "1.${BUILD_NUMBER}"
def semanticVersion = "1.${BUILD_NUMBER}.0"
def repoName = "riyapulusuganti/Drepo" // Ensure after forking, update the repoName accordingly.
def releasePipelineName = "CDJenkins" // Ensure you enter the correct release pipeline name that you have created in Jenkins

pipeline {
    agent any

    tools {
        maven 'Maven'
    }

    environment {
        SCANNER_HOME = tool 'sonarScanner'
        VERACODE_APPLICATION_NAME = 'PetStoreAPI-Github' // Ensure you update the correct Application name
        VERACODE_SCANNER_NAME = 'Veracode'
    }

    stages {
        stage('Build') {
            steps {
                sh 'mvn -B -DskipTests clean compile'
            }
        }

        stage('Test') {
            steps {
                sh 'mvn test'
                sleep(5)
            }
            post {
                always {
                    junit "**/target/surefire-reports/*.xml"
                }
            }
        }

        stage('Register Artifact') {
            steps {
                script {
                    // JFrog Artifactory upload
                    def server = Artifactory.server 'JFROGRIYA'
                    def uploadSpec = """{
                        "files": [{
                            "pattern": "/tmp/app-devops-jenkins-${env.BUILD_NUMBER}-SNAPSHOT.jar",
                            "target": "riya-libs-snapshot-l-maven-remote/${env.BUILD_NUMBER}/"
                        }]
                    }"""
                    
                    def buildInfo = server.upload(uploadSpec)
                    server.publishBuildInfo(buildInfo)
                }

                // Register Artifact with snDevOpsArtifact
                snDevOpsArtifact(artifactsPayload: """
                {
                    "artifacts":
                    [
                        {
                            "name": "${artifactname}",
                            "version": "${version}",
                            "semanticVersion": "${semanticVersion}",
                            "repositoryName": "${repoName}"
                        }
                    ],
                    "branchName": "main"
                }""")
            }
        }

        stage('Sonar Scan') {
            steps {
                sonarSummaries()
            }
        }

        stage('Security Scan') {
            steps {
                echo "Running Security step ..."
                // Uncomment and configure the correct scanner if needed
                // snDevOpsSecurityResult securityResultAttributes: '{"scanner": "Veracode", "applicationName": "${env.VERACODE_APPLICATION_NAME}"}'
            }
        }
    }

    post {
        success {
            script {
                echo "${releasePipelineName}"
                build job: "${releasePipelineName}"
            }
        }
    }
}

def sonarSummaries() {
    withSonarQubeEnv('sonarcloud.io') {
        if (fileExists("sonar-project.properties")) {
            sh '${SCANNER_HOME}/bin/sonar-scanner'
        } else {
            sh 'mvn clean verify sonar:sonar \
                -Dsonar.login=8c5fe0915a1e4b00995edc284975b4f6d568a5c9 \
                -Dsonar.host.url=https://sonarcloud.io \
                -Dsonar.organization=riyapulusuganti05 \
                -Dsonar.projectKey=riyapulusuganti05_Drepo'
        }
    }
}
