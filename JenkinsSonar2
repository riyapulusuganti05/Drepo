def artifactname = "devops-snow-build-app.jar"
def repoName = "JenkinsDevOpsProject"
def pipelineName = "SunilPipelines/Sunil-Scripted-Pipeline-Sonar"
def semanticVersion = "${env.BUILD_NUMBER}.0.0"
def packageName = "devops-snow-build-pkg_${env.BUILD_NUMBER}"
def version = "${env.BUILD_NUMBER}.0"
def pkgName = "devops-snow-build-pkg_${env.BUILD_NUMBER}"
def changeRequestNumber = "null"
def buildNo = "${env.BUILD_NUMBER}"
def currStageName = "none"  

pipeline { 
    agent any
    tools {  
        maven 'Maven'
    } 
    environment {
        SCANNER_HOME = tool 'sonarScanner'
    }
    stages {
        stage('Build') {
            steps {
                echo 'Build Stage'
                sh 'mvn -B -DskipTests clean compile'
                // snDevOpsChange(ignoreErrors: false)
                // sonarSummaries()
            }
        }
        stage('Test') {
            steps {
               // sonarSummaries()
                sh 'mvn -B package --file pom.xml'
                // Example Veracode integration (commented out)
              //  veracode applicationName: "App-DevOps-Azure-POC", criticality: 'VeryHigh', debug: true, timeout: 20, fileNamePattern: '', pHost: '', pPassword: '', pUser: '', replacementPattern: '', sandboxName: '', scanExcludesPattern: '', scanIncludesPattern: '', scanName: "${BUILD_TAG}", uploadExcludesPattern: '', uploadIncludesPattern: 'target/DemoMavenProject-0.0.1-SNAPSHOT.jar', vid: "5a57339d6779ffb76782e03df3f6e9d1", vkey: "f31d151c427a3286469a6291b14dee15e7f553e066b32c801f09014dc3282de4f51a81cd0bde7c7dd9d95de9a71a32c8a2c582158f278320ae765fe9fd232e0a",waitForScan : true
               //   snDevOpsSecurityResult securityResultAttributes: '{"scanner": "Checkmarx SAST", "projectId": "1076", "securityToolId": ""}'
                 sh 'mvn test'
            }
            post {
                always {
                    junit '**/target/surefire-reports/TEST-*.xml'
                }
            }
        }
        stage('Security') {
            steps {
                echo 'Security ....'
                // Example security integration (commented out)
                 snDevOpsSecurityResult securityResultAttributes: '{"scanner": "Checkmarx SAST", "projectId": "1076", "securityToolId": "76ce79539745521003267d56f053afe7"}'
                 // snDevOpsSecurityResult securityResultAttributes: "{'scanner': 'Veracode','applicationName': 'PetStoreAPI-Github', 'securityToolId' : '76ce79539745521003267d56f053afe7'}"
            }
        }
      /*  stage('Register Artifact') {
          steps {
                echo 'Hello World'
            writeFile file: "/tmp/app-devops-jenkins-${env.BUILD_NUMBER}-SNAPSHOT.jar", text: 'This is a test'
            writeFile file: "/tmp/app-devops-jenkins2-${env.BUILD_NUMBER}-SNAPSHOT.jar", text: 'This is a test'
    
            }
            
            post { 
                always { 
        script { 
                 def server = Artifactory.server 'JFROGRIYA'
                 def uploadSpec = """{
                    "files": [{
                       "pattern": "/tmp/app-devops-jenkins-${env.BUILD_NUMBER}-SNAPSHOT.jar",
                       "target": "riya-libs-snapshot-l-libs-release//${env.BUILD_NUMBER}/"
                    }]
                 }"""

              def buildInfo = server.upload(uploadSpec) 
              server.publishBuildInfo buildInfo   
        }}
       }
      }*/
       
        stage('Deploy') {
            steps {
                script {
                    echo 'Running deploy stage'
                    snDevOpsArtifact(artifactsPayload: """{
                        "artifacts": [{
                            "name": "${artifactname}", 
                            "version": "1.${env.BUILD_NUMBER}",
                            "semanticVersion": "1.${env.BUILD_NUMBER}.0",
                            "repositoryName": "${repoName}"
                        }],
                        "branchName": "main"
                    }""")
                   snDevOpsPackage(name: "${pkgName}-${env.BUILD_NUMBER}", artifactsPayload: """{
                        "artifacts": [{
                            "name": "${artifactname}",
                            "version": "1.${env.BUILD_NUMBER}",
                            "repositoryName": "${repoName}"
                        }],
                        "branchName": "main"
                    }""")
                
                   //  snDevOpsChange(ignoreErrors: false)
                   snDevOpsChange changeRequestDetails: '{ "attributes": {"chg_model": "62d10fa1c303101035ae3f52c1d3aec1"},"autoCloseChange": false}',changeStepTimeOut: 18000, pollingInterval: 60
                  //  snDevOpsChange abortOnChangeCreationFailure: false, abortOnChangeStepTimeOut: false,changeCreationTimeOut: 30, changeRequestDetails: '{ "attributes": { "short_description": "Test description", "priority": "1", "start_date": "2021-02-05 08:00:00", "end_date": "2022-04-05 08:00:00", "justification": "test justification", "description": "test description", "cab_required": true, "comments": "This update for work notes is from jenkins file", "work_notes": "test work notes", "assignment_group": "a715cd759f2002002920bde8132e7018" }, "setCloseCode": false }', changeStepTimeOut: 30, pollingInterval: 10
                   // snDevOpsChange changeRequestDetails: '{ "attributes": {"chg_model": "e55d0bfec343101035ae3f52c1d3ae49","standard_change_template"="563504cc47410200e90d87e8dee490e2"},"autoCloseChange": false}',changeStepTimeOut: 18000, pollingInterval: 60
                    stageName = "Deploy"
                    
                    changeRequestNumber = snDevOpsGetChangeNumber(changeDetails: """{"stage_name":"${stageName}"}""")
                    echo "${changeRequestNumber}"
                    
                    snDevOpsUpdateChangeInfo(changeRequestDetails: """{
                        "close_code": "successful",
                        "state": "3",
                        "close_notes": "Deployment to PROD was successful",
                        "short_description": "Short description updated in ${currStageName} Step by ${env.BUILD_NUMBER}",
                        "priority": "1",
                        "start_date": "2024-02-05 08:00:00",
                        "end_date": "2024-12-25 08:00:00",
                        "justification": "test justification",
                        "description": "test description",
                        "cab_required": true,
                        "comments": "This update for comments is from Jenkins file",
                        "work_notes": "This update for work_notes is from Jenkins file"
                    }""", changeRequestNumber: """${changeRequestNumber}""")
                }
            }
        }
    }
}

def sonarSummaries() {
    withSonarQubeEnv('sonarcloud2.io') {
        if (fileExists("sonar-project.properties")) {
            sh '${SCANNER_HOME}/bin/sonar-scanner'
        } else {
            sh 'mvn clean verify sonar:sonar \
                -Dsonar.login=aa95cf5eccbb74d54d04b6c027b9b80b3ed4794f \
                -Dsonar.host.url=https://sonarcloud.io \
                -Dsonar.organization=pramaraju96 \
                -Dsonar.projectKey=pramaraju96_ServiceNow-DevOps-Change-Sample'
        }
    }
}
